plugins {
	id "java"
	id "edu.wpi.first.GradleRIO" version "2025.3.2"
	id "com.diffplug.spotless" version "7.0.3"
	id "com.peterabeles.gversion" version "1.10.3"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
	targets {
		roborio(getTargetTypeClass('RoboRIO')) {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = project.frc.getTeamNumber()
			debug = project.frc.getDebugOrDefault(false)

			artifacts {
				// First part is artifact name, 2nd is artifact type
				// getTargetTypeClass is a shortcut to get the class type using a string

				frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
				}

				// Static files artifact
				frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
					files = project.fileTree('src/main/deploy')
					directory = '/home/lvuser/deploy'
					deleteOldFiles = false // Change to true to delete files on roboRIO that no
					// longer exist in deploy directory of this project
				}
			}
		}
	}
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
	annotationProcessor wpi.java.deps.wpilibAnnotations()
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from sourceSets.main.allSource
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
	options.compilerArgs.add '-XDstringConcat=inline'
}

project.compileJava.dependsOn(createVersionFile)
gversion {
	srcDir       = "src/main/java/"
	classPackage = "frc.robot"
	className    = "BuildConstants"
	dateFormat   = "yyyy-MM-dd HH:mm:ss z"
	timeZone     = "America/New_York" // Use preferred time zone
	indent       = "  "
}

compileJava.dependsOn 'spotlessApply'
spotless {
	enforceCheck false // Disable spotlessCheck
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**', '**/bin/**'
		}
		toggleOffOn()

		importOrder()
		removeUnusedImports('cleanthat-javaparser-unnecessaryimport')
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()

		cleanthat()

		palantirJavaFormat()

		formatAnnotations()

		eclipse()
				// Optional: Enable the Sort Members feature globally. (default: false)
				.sortMembersEnabled(true)
				// Optional: Specify the sort order of the member categories. (default: T,SF,SI,SM,F,I,C,M)
				//   SF,SI,SM,F,I,C,M,T = Static Fields, Static Initializers, Static Methods, Fields, Initializers, Constructors, Methods, (Nested) Types
				// .sortMembersOrder("SF,SI,SM,F,I,C,M,T")
				// Optional: Enable the reordering of fields, enum constants, and initializers. (default: true)
				// .sortMembersDoNotSortFields(false)
				// Optional: Enable reordering of members of the same category by the visibility within the category. (default: false)
				.sortMembersVisibilityOrderEnabled(true)
		// Optional: Specify the ordering of members of the same category by the visibility within the category. (default: B,V,R,D)
		//   B,R,D,V = Public, Protected, Package, Private
		// .sortMembersVisibilityOrder("B,R,D,V")

		licenseHeader '/* \n* Copyright 2002-$YEAR FRC 1629\n* http://github.com/GaCo-1629\n* \n* This program is free software; you can redistribute it and/or\n* modify it under the terms of the GNU General Public License\n* version 3 as published by the Free Software Foundation or\n* available in the root directory of this project.\n* \n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n* GNU General Public License for more details.\n*/'
	}
	groovyGradle {
		target fileTree('.') {
			include '**/*.gradle'
			exclude '**/build/**', '**/build-*/**'
		}
		greclipse()
		leadingSpacesToTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	format 'xml', {
		target fileTree('.') {
			include '**/*.xml'
			exclude '**/build/**', '**/build-*/**'
		}
		eclipseWtp('xml')
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}
	format 'misc', {
		target fileTree('.') {
			include '**/*.md', '**/.gitignore'
			exclude '**/build/**', '**/build-*/**'
		}
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}
}
